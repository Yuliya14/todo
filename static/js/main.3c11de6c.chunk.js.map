{"version":3,"sources":["api/TodolistsAPI.ts","utils/error-utils.ts","state/auth-reducer.ts","state/app-reducer.ts","common/ErrorSnackbar.tsx","state/tasks-reducer.ts","state/todolist-reducer.ts","common/AddItemForm.tsx","common/EditableSpan.tsx","Task.tsx","Todolist.tsx","TofolistsList.tsx","Login.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","put","delete","tasksAPI","taskId","model","authAPI","loginParams","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","loginAC","value","type","status","isInitialised","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","store","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","then","res","updateTaskAC","catch","console","warn","AddItemForm","memo","useState","setTitle","setError","TextField","label","disabled","className","onChange","e","currentTarget","onKeyPress","charCode","trim","addItem","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","useCallback","changeTaskStatus","currentTaskCompleted","checked","Completed","New","changeTaskTitle","newTitle","completed","entityStatus","HighlightOff","Checkbox","color","Todolist","auth","useEffect","items","setTasksAC","filteredTasks","removeTodolist","setFilterAll","changeTodolistFilter","setFilterActive","setFilterCompleted","addTask","changeTodolistTitle","allTodolistTasks","filter","Delete","style","listStyleType","padding","map","Button","margin","size","TofolistsList","todolists","changeTaskEntityStatusAC","removeTaskAC","deleteTaskTC","resultCode","item","addTaskTC","addTodolist","todolist","createTodolistTC","deleteTodolistTC","changeFilterTodolist","filterValue","changeTodolistTitleAC","changeTodolistTitleTC","Grid","container","spacing","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","FormControlLabel","control","App","isInitialized","isLoggetIn","position","background","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","state","action","copyState","todolistTasks","todoListId","forEach","tl","newTodolist","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c11de6c.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\r\nimport {taskTypeAPI, todolistType, todolistTypeAPI} from \"../App\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fc2c077f-4801-47ba-97bc-ed7e7877df93'\r\n    }\r\n})\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<todolistTypeAPI[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item:todolistType}>>('todo-lists', {title});\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title});\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\r\n    },\r\n}\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{item: taskTypeAPI}>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateModelType) {\r\n        return instance.put<UpdateModelType, AxiosResponse<ResponseType<{item: taskTypeAPI}>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\nexport const authAPI = {\r\n    login(loginParams: LoginParamsType) {\r\n        return instance.post<ResponseType<{item?: number}>>('auth/login', loginParams)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<meResponseType>>('auth/me')\r\n    }\r\n}\r\ntype meResponseType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    fieldsErrors?: Array<string>,\r\n    data: D\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: taskTypeAPI[]\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport type UpdateModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import {ResponseType} from \"../api/TodolistsAPI\";\r\nimport {actionsType, setAppErrorAC, setAppStatusAC} from \"../state/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if(data.messages.length){\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error\"))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\ntype ErrorUtilsDispatchType = Dispatch<actionsType>\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../api/TodolistsAPI\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState = {isLoggedIn: false}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: actionsAuthType) => {\r\n    switch (action.type) {\r\n        case 'APP/SET-IS-LOGGED-IN':\r\n        case 'APP/SET-IS-LOGGED_OUT':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const loginAC = (value: boolean) => {\r\n    return {type: 'APP/SET-IS-LOGGED-IN', value} as const\r\n}\r\nexport const logoutAC = (value: boolean) => {\r\n    return {type: 'APP/SET-IS-LOGGED_OUT', value} as const\r\n}\r\nexport const loginTC = (loginParams: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(loginParams)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(loginAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(logoutAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\ntype actionsAuthType = ReturnType<typeof loginAC> | ReturnType<typeof logoutAC>\r\ntype initialStateType = typeof initialState","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/TodolistsAPI\";\r\nimport {loginAC} from \"./auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    status: 'loading' as requestStatusType,\r\n    error: null as string | null,\r\n    isInitialised: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: actionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialised: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//action creator\r\n\r\nexport const setAppStatusAC = (status: requestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setInitialised = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(loginAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else handleServerAppError(res.data, dispatch)\r\n            dispatch(setInitialised(true))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport type requestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type initialStateType = typeof initialState\r\nexport type actionsType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC> | ReturnType<typeof setInitialised>\r\n","import Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport React  from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../state/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(store => store.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {tasksType, taskTypeAPI, todolistType} from \"../App\";\r\nimport {AddTodolistAT, changeTodolistEntityStatusAC, RemoveTodolistAT, SetTodolistsAT} from \"./todolist-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {tasksAPI, TaskStatuses, UpdateModelType} from \"../api/TodolistsAPI\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {requestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\ntype ActionsType = removeTaskAT | addTaskAT | updateTaskAT\r\n    | AddTodolistAT | RemoveTodolistAT | SetTodolistsAT | setTasksAT | ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\ntype removeTaskAT = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype addTaskAT = {\r\n    type: 'ADD-TASK'\r\n    task: taskTypeAPI\r\n}\r\ntype updateTaskAT = {\r\n    type: 'UPDATE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n    domainModel: UpdateDomainModelType\r\n}\r\ntype setTasksAT = {\r\n    type: 'SET-TASKS'\r\n    tasks: taskTypeAPI[]\r\n    todolistId: string\r\n}\r\ntype UpdateDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nconst initialState: tasksType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): tasksType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const copyState = {...state}\r\n            const todolistTasks = copyState[action.todolistId]\r\n            copyState[action.todolistId] = todolistTasks.filter(t => t.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const copyState = {...state}\r\n            const todolistTasks = copyState[action.task.todoListId]\r\n            copyState[action.task.todoListId] = [{...action.task, entityStatus: 'idle'}, ...todolistTasks]\r\n            return copyState\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            const copyState = {...state}\r\n            const todolistTasks = copyState[action.todolistId]\r\n            if (todolistTasks) {\r\n                copyState[action.todolistId] = todolistTasks.map(t => t.id === action.taskId ? {\r\n                    ...t, ...action.domainModel\r\n                } : t)\r\n            }\r\n            return copyState\r\n        }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                [action.todolist.id]: [],\r\n                ...state\r\n            }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => copyState[tl.id] = [])\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n            return copyState\r\n        }\r\n        case \"TASK/ CHANGE-ENTITY-STATUS\": {\r\n            const copyState = {...state}\r\n            copyState[action.todolistId] = copyState[action.todolistId].map(t => t.id === action.taskId\r\n                ? {...t, entityStatus: action.entityStatus} : t)\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action creator\r\nexport const removeTaskAC = (todolistId: string, taskId: string): removeTaskAT => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId} as const\r\n}\r\nexport const addTaskAC = (task: taskTypeAPI): addTaskAT => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const updateTaskAC = (todolistId: string, taskId: string, domainModel: UpdateDomainModelType): updateTaskAT => {\r\n    return {type: 'UPDATE-TASK', todolistId, taskId, domainModel} as const\r\n}\r\nexport const addTodolistAC = (todolist: todolistType): AddTodolistAT => {\r\n    return {type: 'ADD-TODOLIST', todolist} as const\r\n}\r\nexport const setTasksAC = (tasks: taskTypeAPI[], todolistId: string): setTasksAT => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: requestStatusType) => {\r\n    return {type: 'TASK/ CHANGE-ENTITY-STATUS', todolistId, taskId, entityStatus} as const\r\n}\r\n//thunk creator\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(todolistId, taskId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.addTask(todolistId, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else handleServerAppError(res.data, dispatch)\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n\r\n        if (!task) {\r\n            console.warn(\"task not found\")\r\n            return\r\n        }\r\n        const apiModel: UpdateModelType = {\r\n            status: task.status,\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n                ...domainModel\r\n        }\r\n\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                    dispatch(updateTaskAC(todolistId, taskId, domainModel))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n","import {filterTaskType, todolistType, todolistTypeAPI} from \"../App\";\r\nimport {Dispatch} from \"redux\";\r\nimport {todolistsAPI} from \"../api/TodolistsAPI\";\r\nimport {requestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: todolistType[] = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): todolistType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return [...state.filter(tl => tl.id !== action.id)]\r\n        case 'ADD-TODOLIST':\r\n            const newTodolist: todolistType = {...action.todolist, filter: \"all\", entityStatus: 'idle'}\r\n            return [newTodolist, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.newTitle} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'TODOLIST/ CHANGE-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actionCreator\r\nexport const removeTodolistAC = (id: string): RemoveTodolistAT => {\r\n    return {type: 'REMOVE-TODOLIST', id}\r\n}\r\nexport const addTodolistAC = (todolist: todolistType): AddTodolistAT => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (newTitle: string, id: string): ChangeTodolistTitleAT => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', newTitle, id}\r\n}\r\nexport const changeTodolistFilterAC = (filter: filterTaskType, id: string): ChangeTodolistFilterAT => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', filter, id}\r\n}\r\nexport const setTodolistsAC = (todolists: todolistTypeAPI[]) => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n}\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: requestStatusType) => {\r\n    return {type: 'TODOLIST/ CHANGE-ENTITY-STATUS', id, entityStatus} as const\r\n}\r\n//thunkCreator\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n        )\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else handleServerAppError(res.data, dispatch)\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (newTitle: string, id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(id, newTitle)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(newTitle, id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\ntype ActionsType = RemoveTodolistAT\r\n    | AddTodolistAT\r\n    | ChangeTodolistTitleAT\r\n    | ChangeTodolistFilterAT\r\n    | SetTodolistsAT\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type RemoveTodolistAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistAT = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist: todolistTypeAPI\r\n}\r\nexport type SetTodolistsAT = {\r\n    type: \"SET-TODOLISTS\"\r\n    todolists: todolistTypeAPI[]\r\n}\r\ntype ChangeTodolistTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    newTitle: string\r\n    id: string\r\n}\r\ntype ChangeTodolistFilterAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: filterTaskType\r\n    id: string\r\n}","import React, {ChangeEvent, KeyboardEvent, MouseEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = (e: MouseEvent<HTMLButtonElement>) => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Field is required!')\r\n        }\r\n    }\r\n    const setTitleTask = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(null)\r\n        if (e.charCode === 13 && title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else if (e.charCode === 13 && title.trim() === \"\") {\r\n            setError('Field is required!')\r\n            if (error !== null) setError(null)\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField id=\"outlined-basic\" label=\"Title\" variant=\"outlined\" disabled={props.disabled}\r\n                   className={error ? 'error' : ''} value={title} onChange={setTitleTask} onKeyPress={onKeyPressHandler}/>\r\n        <IconButton onClick={addItem}>\r\n           <AddBox/>\r\n        </IconButton>\r\n        {error && <div className={'error-message'}>{error}</div>}\r\n    </div>\r\n})","import TextField from \"@material-ui/core/TextField/TextField\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n    const activateEditMode = () => {\r\n        props.disabled ?  setEditMode(false) : setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n        ? <TextField id=\"standard-basic\" label=\"Title\" variant=\"standard\"\r\n                     value={title} autoFocus onBlur={activateViewMode} onChange={changeTitle}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, MouseEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {HighlightOff} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"./common/EditableSpan\";\r\nimport {taskType} from \"./App\";\r\nimport {TaskStatuses} from \"./api/TodolistsAPI\";\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: taskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n        const removeTask = useCallback((e: MouseEvent<HTMLButtonElement>) => {\r\n            props.removeTask(props.task.id, props.todolistId)\r\n        }, [props])\r\n        const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            let currentTaskCompleted = e.currentTarget.checked\r\n            props.changeTaskStatus(props.task.id, currentTaskCompleted ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n        }, [props])\r\n        const changeTaskTitle = useCallback((newTitle: string) => {\r\n            props.changeTaskTitle(props.task.id, newTitle, props.todolistId)\r\n        }, [props])\r\n        return <div key={props.task.id}>\r\n            <li className={props.task.completed ? 'is-done' : ''}>\r\n                <IconButton onClick={removeTask} disabled={props.task.entityStatus === 'loading'}>\r\n                    <HighlightOff/>\r\n                </IconButton>\r\n                <Checkbox\r\n                    checked={props.task.completed}\r\n                    onChange={changeTaskStatus}\r\n                    color=\"secondary\"\r\n                    disabled={props.task.entityStatus === 'loading'}\r\n                />\r\n                <EditableSpan title={props.task.title} onChange={changeTaskTitle} disabled={props.task.entityStatus === 'loading'}/>\r\n            </li>\r\n        </div>\r\n    })","import React, {MouseEvent, useCallback, useEffect} from \"react\";\r\nimport {filterTaskType, tasksType, taskType} from \"./App\";\r\nimport {AddItemForm} from \"./common/AddItemForm\";\r\nimport {EditableSpan} from \"./common/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TaskStatuses} from \"./api/TodolistsAPI\";\r\nimport {requestStatusType} from \"./state/app-reducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    title: string\r\n    tasks: tasksType\r\n    filter: filterTaskType\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTodolistFilter: (filterValue: filterTaskType, todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    entityStatus: requestStatusType\r\n}\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(store => store.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        if(!isLoggedIn) return\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((e: MouseEvent<HTMLButtonElement>) => {\r\n        props.removeTodolist(props.todolistId)\r\n    }, [props])\r\n    const setFilterAll = useCallback((e: MouseEvent<HTMLButtonElement>) => (props.changeTodolistFilter('all', props.todolistId)), [props])\r\n    const setFilterActive = useCallback((e: MouseEvent<HTMLButtonElement>) => (props.changeTodolistFilter('active', props.todolistId)), [props])\r\n    const setFilterCompleted = useCallback((e: MouseEvent<HTMLButtonElement>) => (props.changeTodolistFilter('completed', props.todolistId)), [props])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title, props.todolistId)\r\n        }\r\n    },[props])\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(newTitle, props.todolistId)\r\n    }, [props])\r\n\r\n    let allTodolistTasks = props.tasks[props.todolistId]\r\n    let filteredTasks: taskType[]\r\n    if (props.filter === 'all') filteredTasks = allTodolistTasks\r\n    else {\r\n        props.filter === 'active'\r\n            ? filteredTasks = allTodolistTasks.filter((t: { completed: boolean; }) => !t.completed)\r\n            : filteredTasks = allTodolistTasks.filter((t: { completed: boolean; }) => t.completed)\r\n    }\r\n    return <div>\r\n        <IconButton onClick={removeTodolist} disabled = {props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n        <EditableSpan title={props.title} onChange={changeTodolistTitle} disabled = {props.entityStatus === 'loading'}/>\r\n\r\n        <AddItemForm addItem={addTask} disabled = {props.entityStatus === 'loading'}/>\r\n\r\n        <ul style={{listStyleType: \"none\", padding: \"0px\"}}>{\r\n            filteredTasks.map(t => <Task key={t.id}\r\n                                         changeTaskStatus={props.changeTaskStatus}\r\n                                         changeTaskTitle={props.changeTaskTitle}\r\n                                         todolistId={props.todolistId}\r\n                                         removeTask={props.removeTask}\r\n                                         task={t}/>)}\r\n        </ul>\r\n        <div>\r\n            <Button style={{margin: \"3px\"}} size={'small'} variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color=\"default\" onClick={setFilterAll}>All</Button>\r\n            <Button style={{margin: \"3px\"}} size={'small'}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"} color=\"inherit\"\r\n                    onClick={setFilterActive}>Active</Button>\r\n            <Button style={{margin: \"3px\"}} size={'small'}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"} color=\"secondary\"\r\n                    onClick={setFilterCompleted}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTaskTC, deleteTaskTC, updateTaskTC} from \"./state/tasks-reducer\";\r\nimport {TaskStatuses} from \"./api/TodolistsAPI\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    deleteTodolistTC, fetchTodolistsTC\r\n} from \"./state/todolist-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {filterTaskType, tasksType, todolistType} from \"./App\";\r\nimport {AddItemForm} from \"./common/AddItemForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TofolistsList = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, todolistType[]>(store => store.todolists)\r\n    const tasks = useSelector<AppRootStateType, tasksType>(store => store.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(store => store.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n      dispatch(fetchTodolistsTC())\r\n  }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(deleteTaskTC(todolistId, taskId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, todolistId, {status}))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, todolistId, {title: newTitle}))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistTC(todolistId))\r\n    }, [dispatch])\r\n    const changeFilterTodolist = useCallback((filterValue: filterTaskType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(filterValue, todolistId))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleTC(newTitle, todolistId))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <Grid container  spacing={5}>\r\n        <Grid container style={{padding: \"30px 0px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        {todolists.map(t => {\r\n            return <Grid item key={t.id}>\r\n                <Paper elevation={8} style={{padding: \"10px\"}}>\r\n                    <Todolist key={t.id}\r\n                              todolistId={t.id}\r\n                              title={t.title}\r\n                              filter={t.filter}\r\n                              tasks={tasks}\r\n                              removeTodolist={removeTodolist}\r\n                              changeTodolistFilter={changeFilterTodolist}\r\n                              removeTask={removeTask}\r\n                              addTask={addTask}\r\n                              changeTaskStatus={changeTaskStatus}\r\n                              changeTaskTitle={changeTaskTitle}\r\n                              changeTodolistTitle={changeTodolistTitle}\r\n                              entityStatus={t.entityStatus}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        })}\r\n    </Grid>\r\n}","import FormControl from '@mui/material/FormControl'\r\nimport Grid from '@mui/material/Grid'\r\nimport React from 'react'\r\nimport {Button, Checkbox, FormControlLabel, FormGroup, FormLabel, TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./state/auth-reducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(store => store.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    type formikErrorsType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            dispatch(loginTC(values))\r\n\r\n        },\r\n        validate: values => {\r\n            const errors: formikErrorsType = {}\r\n            if (!values.email) errors.email = 'Required'\r\n            else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = 'Invalid email'\r\n            else if (!values.password) errors.password = 'Required'\r\n            else if (errors.password && errors.password.length < 5) errors.password = 'Length password should be more 5'\r\n            return errors\r\n        }\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={\"center\"}>\r\n        <form onSubmit={formik.handleSubmit}><FormControl>\r\n            <FormLabel>\r\n                <p>To got in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}>here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n                <TextField label='Email' margin='normal' {...formik.getFieldProps('email')}/>\r\n                {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n\r\n                <TextField label='Password' margin='normal' type={'password'} {...formik.getFieldProps('password')}/>\r\n                {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                <FormControlLabel control={<Checkbox color={'error'}\r\n                                                     checked={formik.values.rememberMe}\r\n                                                     {...formik.getFieldProps('rememberMe')}/>} label={'Remember me'}/>\r\n                <Button type={'submit'} variant={'outlined'} color={'inherit'}>Login</Button>\r\n            </FormGroup>\r\n        </FormControl></form>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\nimport {Button, Container, IconButton, LinearProgress, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {initializeAppTC, requestStatusType} from \"./state/app-reducer\";\nimport {ErrorSnackbar} from \"./common/ErrorSnackbar\";\nimport {TofolistsList} from \"./TofolistsList\";\nimport {Login} from \"./Login\";\nimport {BrowserRouter, Navigate, Route, Routes} from \"react-router-dom\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {logoutTC} from \"./state/auth-reducer\";\n\nfunction App() {\n    const status = useSelector<AppRootStateType, requestStatusType>(store => store.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>(store => store.app.isInitialised)\n    const isLoggetIn = useSelector<AppRootStateType, boolean>(store => store.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [dispatch])\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    if (!isInitialized) {\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress color=\"inherit\"/>\n        </div>\n    }\n    return (\n        <BrowserRouter>\n            <div>\n                <AppBar position=\"static\" style={{background: \"black\",}}>\n                    <Toolbar style={{justifyContent: \"space-between\"}}>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n                        <Typography>\n                            Todolist\n                        </Typography>\n                        {isLoggetIn\n                            ? <Button color=\"inherit\" variant=\"outlined\" onClick={logout}>Logout</Button>\n                            : <Button color=\"inherit\" variant=\"outlined\">Login</Button>}\n                    </Toolbar>\n                </AppBar>\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\n                <Container fixed>\n                    <Routes>\n                        <Route path={'/'} element={<TofolistsList/>}/>\n                        <Route path={'/login'} element={<Login/>}/>\n                        <Route path={'/404'} element={<h1>404: PAGE NOT FOUND</h1>}/>\n                        <Route path={'*'} element={<Navigate to={'/404'}/>}/>\n                    </Routes>\n                </Container>\n                <ErrorSnackbar/>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport type taskTypeAPI = {\n    description: string\n    title: string\n    completed: boolean\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type taskType = taskTypeAPI & {\n    entityStatus: requestStatusType\n}\nexport type tasksType = {\n    [key: string]: taskType[]\n}\nexport type filterTaskType = 'all' | 'active' | 'completed'\nexport type todolistTypeAPI = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type todolistType = todolistTypeAPI & {\n    filter: filterTaskType\n    entityStatus: requestStatusType\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todolistsReducer} from \"./todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}><App/></Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}